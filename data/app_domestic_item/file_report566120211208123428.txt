코틀린 장점
-자료형에 대한 오류 미리 잡아줌
-널 포인터로 인한 프로그램의 중단을 예방할 수 있음
-데이터형 선언 시 널 가능한 형식(-?)과 불가능한 형식 지원
-세미콜론 생략가능


코틀린 함수 기본 형태

fun 함수명(변수): Unit{

}
-> 반환값이 없는 함수(void 함수)에 선언한 리턴타입 Unit은 생략 가능

​
fun 함수명(변수): 리턴타입{

   return  리턴값

}


fun 함수이름(인수이름: 인수자료형, 인수2이름: 인수2자료형): 반환자료형 {

}
-> 파라미터 2개 이상

fun sum(a: Int, b: Int): Int{
   return a + b;
}


fun main(args: Array<String>;){
   println("Hello,world!")
}
->출력문 println


var str1: String = "hi"
val str2: String = "hello"
->  변수명 뒤에 타입 지정


var 과 val의 차이
final(상수) 선언시에는 val, 변수 선언시 var 사용

var str1 = "hi"
val num = 1
-> 코틀린에서는 자료형 생략해도 자동으로 추론 가능



코틀린의 기본 자료형은 모두 객체
숫자형 : Double, Float, Long, Int, Short, Byte

문자형: String, Char

+ Booleam





